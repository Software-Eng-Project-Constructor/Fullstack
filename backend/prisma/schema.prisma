generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model User {
    id          String       @id @default(uuid())
    name        String
    email       String       @unique
    password    String
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    teamMembers TeamMember[]

    assignedTasks Task[] @relation("TaskAssignees")
}

model Project {
    id          Int          @id @default(autoincrement())
    name        String
    teamMembers TeamMember[]
    milestones  Milestone[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model TeamMember {
    id          String       @id @default(uuid())
    name        String
    role        String
    projectId Int // Changed to Int
    project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    userId     String
    user       User     @relation(fields: [userId], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
model Milestone {
    id          String       @id @default(uuid())
    projectId  Int // Changed to Int
    project    Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    title       String
    description String?
    dueDate     DateTime
    status      String       @default("Not Started")
    tasks       Task[]
    events      Event[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Task {
    id          Int          @id @default(autoincrement())
    milestoneId String?
    milestone    Milestone? @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
    title       String
    description String?
    completed   Boolean      @default(false)
    status      String       @default("Pending")
    createdAt   DateTime     @default(now())
    updatedAt DateTime @updatedAt @default(now())

    assignees    User[]     @relation("TaskAssignees")
}

model Event {
    id          String       @id @default(uuid())
    title       String
    description String?
    startDate   DateTime   // Changed to DateTime
    endDate     DateTime   // Changed to DateTime
    priority    String?
    category    String?
    milestoneId String?
    milestone    Milestone? @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}